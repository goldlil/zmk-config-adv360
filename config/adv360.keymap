/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define KEYPAD_LAYER 1

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        tlb: toggle_layer_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "TOGLE_LAYER_BALANCED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings =
                <&mo>,
                <&kp>;
        };
        thb: tap_hold_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "THB";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <125>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <61>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp C_VOLUME_UP     &kp N1    &kp N2  &kp UP_ARROW     &kp N4    &kp N5                     &tog 1         &mo 3      &kp N6     &kp N7               &kp DOWN     &kp N9        &kp N0  &kp MINUS
   &kp C_VOL_DN      &kp Q     &kp W         &kp L      &kp P     &kp B                      &none         &none       &kp J      &kp F                  &kp U      &kp Y         &kp P   &kp BSLH
        &kp ESC      &kp A     &kp R         &kp S      &kp T     &kp G                      &none     &kp LCTRL    &kp LALT                                     &kp LGUI  &kp LEFT_ALT      &none     &kp M  &tlb 3 N      &tlb 1 E    &kp I  &kp O  &kp RIGHT
      &kp LSHFT      &kp Z     &kp V         &kp C      &kp D     &kp X                      &none         &none    &kp HOME      &none                  &none  &kp PG_UP         &none      &none     &kp Q     &kp H  &tlb 2 COMMA  &kp DOT  &kp K  &kp RSHFT
          &mo 2  &kp GRAVE  &kp CAPS      &kp LEFT  &kp RIGHT  &kp BSPC  &kp RS(RA(RC(RG(SPACE))))  &kp LEFT_GUI  &kp ESCAPE  &kp ENTER  &thb LEFT_SHIFT SPACE     &kp UP      &kp DOWN   &kp LBKT  &kp RBKT     &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL     &kp N1     &kp N2     &kp N3     &kp N4    &kp N5     &trans      &mo 3     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
  &kp TAB      &kp Q  &kp KP_N7  &kp KP_N8  &kp KP_N9     &kp T     &trans     &trans      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
  &kp ESC     &trans  &kp KP_N4  &kp KP_N5  &kp KP_N6     &kp G     &trans  &kp LCTRL   &kp LALT                                 &kp LGUI        &kp RCTRL      &trans     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
&kp LSHFT      &kp Z  &kp KP_N1  &kp KP_N2  &kp KP_N3     &kp B     &trans     &trans   &kp HOME      &trans        &trans      &kp PG_UP           &trans      &trans     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
    &mo 2  &kp GRAVE   &kp CAPS   &kp LEFT  &kp RIGHT  &kp BSPC  &kp KP_N0    &kp END  &kp PG_DN   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN  &kp KP_DOT  &kp RBKT      &mo 2
            >;
        };

        characters {
            bindings = <
&kp F1           &kp F2       &kp HASH   &kp ASTERISK          &kp ASTRK            &kp F6  &tog 1   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans           &trans      &kp MINUS     &kp DOLLAR          &kp UNDER         &kp GRAVE  &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans
&trans     &kp QUESTION  &kp BACKSLASH   &kp KP_EQUAL  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &trans  &trans  &trans                   &trans   &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans
&trans  &kp EXCLAMATION      &kp COLON  &kp SEMICOLON           &kp PLUS       &kp PERCENT  &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans  &kp PIPE  &trans  &trans
&trans           &trans         &trans         &trans             &trans            &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans
            >;
        };

        character_2 {
            bindings = <
&trans     &trans     &bt BT_SEL 1       &bt BT_SEL 2           &bt BT_SEL 3     &bt BT_SEL 4                  &trans       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans
&trans     &trans    &kp AMPERSAND          &kp CARET              &kp TILDE           &trans             &bootloader  &bootloader        &trans        &trans           &trans        &trans        &trans                  &trans
&trans  &kp SLASH   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS           &trans  &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR        &trans                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5  &trans     &kp LESS_THAN  &trans  &trans  &trans  &trans
&trans     &trans  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS           &trans                  &trans       &trans        &trans        &trans           &trans        &trans        &trans                  &trans  &trans  &kp GREATER_THAN  &trans  &trans  &trans  &trans
&trans     &trans           &trans         &bl BL_INC             &bl BL_DEC  &rgb_ug RGB_TOG              &bl BL_TOG       &trans        &trans    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                  &trans  &trans            &trans
            >;
        };
    };
};
